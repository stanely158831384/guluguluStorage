// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stanely158831384/guluguluStorage/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/stanely158831384/guluguluStorage/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 string) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateFeeling mocks base method.
func (m *MockStore) CreateFeeling(arg0 context.Context, arg1 db.CreateFeelingParams) (db.Feeling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeeling", arg0, arg1)
	ret0, _ := ret[0].(db.Feeling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeeling indicates an expected call of CreateFeeling.
func (mr *MockStoreMockRecorder) CreateFeeling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeeling", reflect.TypeOf((*MockStore)(nil).CreateFeeling), arg0, arg1)
}

// CreateIngredient mocks base method.
func (m *MockStore) CreateIngredient(arg0 context.Context, arg1 db.CreateIngredientParams) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngredient indicates an expected call of CreateIngredient.
func (mr *MockStoreMockRecorder) CreateIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngredient", reflect.TypeOf((*MockStore)(nil).CreateIngredient), arg0, arg1)
}

// CreateIngredientsTx mocks base method.
func (m *MockStore) CreateIngredientsTx(arg0 context.Context, arg1 db.CreateIngredientsTxParams) (db.CreateIngredientsTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngredientsTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateIngredientsTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngredientsTx indicates an expected call of CreateIngredientsTx.
func (mr *MockStoreMockRecorder) CreateIngredientsTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngredientsTx", reflect.TypeOf((*MockStore)(nil).CreateIngredientsTx), arg0, arg1)
}

// CreatePicture mocks base method.
func (m *MockStore) CreatePicture(arg0 context.Context, arg1 db.CreatePictureParams) (db.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePicture", arg0, arg1)
	ret0, _ := ret[0].(db.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePicture indicates an expected call of CreatePicture.
func (mr *MockStoreMockRecorder) CreatePicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePicture", reflect.TypeOf((*MockStore)(nil).CreatePicture), arg0, arg1)
}

// CreateProduct mocks base method.
func (m *MockStore) CreateProduct(arg0 context.Context, arg1 db.CreateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStoreMockRecorder) CreateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStore)(nil).CreateProduct), arg0, arg1)
}

// CreateProductTx mocks base method.
func (m *MockStore) CreateProductTx(arg0 context.Context, arg1 db.CreateProductTxParams) (db.CreateProductTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateProductTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProductTx indicates an expected call of CreateProductTx.
func (mr *MockStoreMockRecorder) CreateProductTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductTx", reflect.TypeOf((*MockStore)(nil).CreateProductTx), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteFeeling mocks base method.
func (m *MockStore) DeleteFeeling(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeeling", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFeeling indicates an expected call of DeleteFeeling.
func (mr *MockStoreMockRecorder) DeleteFeeling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeeling", reflect.TypeOf((*MockStore)(nil).DeleteFeeling), arg0, arg1)
}

// DeleteIngredient mocks base method.
func (m *MockStore) DeleteIngredient(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngredient", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngredient indicates an expected call of DeleteIngredient.
func (mr *MockStoreMockRecorder) DeleteIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngredient", reflect.TypeOf((*MockStore)(nil).DeleteIngredient), arg0, arg1)
}

// DeletePicture mocks base method.
func (m *MockStore) DeletePicture(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePicture", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePicture indicates an expected call of DeletePicture.
func (mr *MockStoreMockRecorder) DeletePicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePicture", reflect.TypeOf((*MockStore)(nil).DeletePicture), arg0, arg1)
}

// DeleteProduct mocks base method.
func (m *MockStore) DeleteProduct(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStoreMockRecorder) DeleteProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStore)(nil).DeleteProduct), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(arg0 context.Context, arg1 int64) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), arg0, arg1)
}

// GetFeeling mocks base method.
func (m *MockStore) GetFeeling(arg0 context.Context, arg1 int64) (db.Feeling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeeling", arg0, arg1)
	ret0, _ := ret[0].(db.Feeling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeeling indicates an expected call of GetFeeling.
func (mr *MockStoreMockRecorder) GetFeeling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeeling", reflect.TypeOf((*MockStore)(nil).GetFeeling), arg0, arg1)
}

// GetIngredient mocks base method.
func (m *MockStore) GetIngredient(arg0 context.Context, arg1 int64) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngredient indicates an expected call of GetIngredient.
func (mr *MockStoreMockRecorder) GetIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngredient", reflect.TypeOf((*MockStore)(nil).GetIngredient), arg0, arg1)
}

// GetPicture mocks base method.
func (m *MockStore) GetPicture(arg0 context.Context, arg1 int64) (db.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPicture", arg0, arg1)
	ret0, _ := ret[0].(db.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPicture indicates an expected call of GetPicture.
func (mr *MockStoreMockRecorder) GetPicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPicture", reflect.TypeOf((*MockStore)(nil).GetPicture), arg0, arg1)
}

// GetProduct mocks base method.
func (m *MockStore) GetProduct(arg0 context.Context, arg1 int64) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockStoreMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockStore)(nil).GetProduct), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// ListCategories mocks base method.
func (m *MockStore) ListCategories(arg0 context.Context, arg1 db.ListCategoriesParams) ([]db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockStoreMockRecorder) ListCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockStore)(nil).ListCategories), arg0, arg1)
}

// ListFeelings mocks base method.
func (m *MockStore) ListFeelings(arg0 context.Context, arg1 db.ListFeelingsParams) ([]db.Feeling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeelings", arg0, arg1)
	ret0, _ := ret[0].([]db.Feeling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeelings indicates an expected call of ListFeelings.
func (mr *MockStoreMockRecorder) ListFeelings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeelings", reflect.TypeOf((*MockStore)(nil).ListFeelings), arg0, arg1)
}

// ListFeelingsByProductId mocks base method.
func (m *MockStore) ListFeelingsByProductId(arg0 context.Context, arg1 db.ListFeelingsByProductIdParams) ([]db.Feeling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeelingsByProductId", arg0, arg1)
	ret0, _ := ret[0].([]db.Feeling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeelingsByProductId indicates an expected call of ListFeelingsByProductId.
func (mr *MockStoreMockRecorder) ListFeelingsByProductId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeelingsByProductId", reflect.TypeOf((*MockStore)(nil).ListFeelingsByProductId), arg0, arg1)
}

// ListFeelingsByUserId mocks base method.
func (m *MockStore) ListFeelingsByUserId(arg0 context.Context, arg1 db.ListFeelingsByUserIdParams) ([]db.Feeling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeelingsByUserId", arg0, arg1)
	ret0, _ := ret[0].([]db.Feeling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeelingsByUserId indicates an expected call of ListFeelingsByUserId.
func (mr *MockStoreMockRecorder) ListFeelingsByUserId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeelingsByUserId", reflect.TypeOf((*MockStore)(nil).ListFeelingsByUserId), arg0, arg1)
}

// ListIngredients mocks base method.
func (m *MockStore) ListIngredients(arg0 context.Context, arg1 db.ListIngredientsParams) ([]db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngredients", arg0, arg1)
	ret0, _ := ret[0].([]db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngredients indicates an expected call of ListIngredients.
func (mr *MockStoreMockRecorder) ListIngredients(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngredients", reflect.TypeOf((*MockStore)(nil).ListIngredients), arg0, arg1)
}

// ListPictures mocks base method.
func (m *MockStore) ListPictures(arg0 context.Context, arg1 db.ListPicturesParams) ([]db.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPictures", arg0, arg1)
	ret0, _ := ret[0].([]db.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPictures indicates an expected call of ListPictures.
func (mr *MockStoreMockRecorder) ListPictures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPictures", reflect.TypeOf((*MockStore)(nil).ListPictures), arg0, arg1)
}

// ListPicturesByUsername mocks base method.
func (m *MockStore) ListPicturesByUsername(arg0 context.Context, arg1 db.ListPicturesByUsernameParams) ([]db.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPicturesByUsername", arg0, arg1)
	ret0, _ := ret[0].([]db.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPicturesByUsername indicates an expected call of ListPicturesByUsername.
func (mr *MockStoreMockRecorder) ListPicturesByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPicturesByUsername", reflect.TypeOf((*MockStore)(nil).ListPicturesByUsername), arg0, arg1)
}

// ListProducts mocks base method.
func (m *MockStore) ListProducts(arg0 context.Context, arg1 db.ListProductsParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockStoreMockRecorder) ListProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockStore)(nil).ListProducts), arg0, arg1)
}

// ListProductsByCategory mocks base method.
func (m *MockStore) ListProductsByCategory(arg0 context.Context, arg1 db.ListProductsByCategoryParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsByCategory", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsByCategory indicates an expected call of ListProductsByCategory.
func (mr *MockStoreMockRecorder) ListProductsByCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsByCategory", reflect.TypeOf((*MockStore)(nil).ListProductsByCategory), arg0, arg1)
}

// ListProductsByUserID mocks base method.
func (m *MockStore) ListProductsByUserID(arg0 context.Context, arg1 db.ListProductsByUserIDParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProductsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProductsByUserID indicates an expected call of ListProductsByUserID.
func (mr *MockStoreMockRecorder) ListProductsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProductsByUserID", reflect.TypeOf((*MockStore)(nil).ListProductsByUserID), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateFeeling mocks base method.
func (m *MockStore) UpdateFeeling(arg0 context.Context, arg1 db.UpdateFeelingParams) (db.Feeling, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFeeling", arg0, arg1)
	ret0, _ := ret[0].(db.Feeling)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFeeling indicates an expected call of UpdateFeeling.
func (mr *MockStoreMockRecorder) UpdateFeeling(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFeeling", reflect.TypeOf((*MockStore)(nil).UpdateFeeling), arg0, arg1)
}

// UpdateIngredient mocks base method.
func (m *MockStore) UpdateIngredient(arg0 context.Context, arg1 db.UpdateIngredientParams) (db.Ingredient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIngredient", arg0, arg1)
	ret0, _ := ret[0].(db.Ingredient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateIngredient indicates an expected call of UpdateIngredient.
func (mr *MockStoreMockRecorder) UpdateIngredient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIngredient", reflect.TypeOf((*MockStore)(nil).UpdateIngredient), arg0, arg1)
}

// UpdatePicture mocks base method.
func (m *MockStore) UpdatePicture(arg0 context.Context, arg1 db.UpdatePictureParams) (db.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePicture", arg0, arg1)
	ret0, _ := ret[0].(db.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePicture indicates an expected call of UpdatePicture.
func (mr *MockStoreMockRecorder) UpdatePicture(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePicture", reflect.TypeOf((*MockStore)(nil).UpdatePicture), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db.UpdateProductParams) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
