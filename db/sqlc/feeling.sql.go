// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: feeling.sql

package db

import (
	"context"
)

const createFeeling = `-- name: CreateFeeling :one
INSERT INTO feeling (
    product_id,
    user_id,
    username,
    comment,
    recommend
) VALUES (
    $1, $2, $3, $4, $5
) 
RETURNING id, product_id, user_id, username, comment, recommend, created_at
`

type CreateFeelingParams struct {
	ProductID int64  `json:"product_id"`
	UserID    int64  `json:"user_id"`
	Username  string `json:"username"`
	Comment   string `json:"comment"`
	Recommend bool   `json:"recommend"`
}

func (q *Queries) CreateFeeling(ctx context.Context, arg CreateFeelingParams) (Feeling, error) {
	row := q.db.QueryRow(ctx, createFeeling,
		arg.ProductID,
		arg.UserID,
		arg.Username,
		arg.Comment,
		arg.Recommend,
	)
	var i Feeling
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Username,
		&i.Comment,
		&i.Recommend,
		&i.CreatedAt,
	)
	return i, err
}

const getFeeling = `-- name: GetFeeling :one
SELECT id, product_id, user_id, username, comment, recommend, created_at FROM feeling
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFeeling(ctx context.Context, id int64) (Feeling, error) {
	row := q.db.QueryRow(ctx, getFeeling, id)
	var i Feeling
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.Username,
		&i.Comment,
		&i.Recommend,
		&i.CreatedAt,
	)
	return i, err
}
